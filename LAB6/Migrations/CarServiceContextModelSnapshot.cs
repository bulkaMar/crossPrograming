// <auto-generated />
using System;
using LAB6;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LAB6.Migrations
{
    [DbContext(typeof(CarServiceContext))]
    partial class CarServiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LAB6.Models.Car", b =>
                {
                    b.Property<string>("LicenceNumber")
                        .HasColumnType("text");

                    b.Property<int>("CurrentMileage")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<double>("EngineSize")
                        .HasColumnType("double precision");

                    b.Property<int>("ModelCode")
                        .HasColumnType("integer");

                    b.Property<string>("OtherCarDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LicenceNumber");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ModelCode");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("LAB6.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AddressLine3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OtherCustomerDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CustomerId");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("LAB6.Models.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ManufacturerCode"));

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OtherManufacturerDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ManufacturerCode");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("LAB6.Models.Mechanic", b =>
                {
                    b.Property<int>("MechanicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MechanicId"));

                    b.Property<string>("MechanicName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OtherMechanicDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MechanicId");

                    b.ToTable("Mechanics");
                });

            modelBuilder.Entity("LAB6.Models.MechanicOnService", b =>
                {
                    b.Property<int>("MechanicId")
                        .HasColumnType("integer");

                    b.Property<int>("SvcBookingId")
                        .HasColumnType("integer");

                    b.HasKey("MechanicId", "SvcBookingId");

                    b.HasIndex("SvcBookingId");

                    b.ToTable("MechanicsOnServices");
                });

            modelBuilder.Entity("LAB6.Models.Model", b =>
                {
                    b.Property<int>("ModelCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ModelCode"));

                    b.Property<int>("ManufacturerCode")
                        .HasColumnType("integer");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OtherModelDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ModelCode");

                    b.HasIndex("ManufacturerCode");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("LAB6.Models.ServiceBooking", b =>
                {
                    b.Property<int>("SvcBookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SvcBookingId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTimeOfService")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicenceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OtherSvcBookingDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PaymentReceivedYN")
                        .HasColumnType("boolean");

                    b.HasKey("SvcBookingId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LicenceNumber");

                    b.ToTable("ServiceBookings");
                });

            modelBuilder.Entity("LAB6.Models.Car", b =>
                {
                    b.HasOne("LAB6.Models.Customer", "Customer")
                        .WithMany("Cars")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LAB6.Models.Model", "Model")
                        .WithMany("Cars")
                        .HasForeignKey("ModelCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("LAB6.Models.MechanicOnService", b =>
                {
                    b.HasOne("LAB6.Models.Mechanic", "Mechanic")
                        .WithMany("MechanicOnServices")
                        .HasForeignKey("MechanicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LAB6.Models.ServiceBooking", "ServiceBooking")
                        .WithMany("MechanicsOnServices")
                        .HasForeignKey("SvcBookingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mechanic");

                    b.Navigation("ServiceBooking");
                });

            modelBuilder.Entity("LAB6.Models.Model", b =>
                {
                    b.HasOne("LAB6.Models.Manufacturer", "Manufacturer")
                        .WithMany("Models")
                        .HasForeignKey("ManufacturerCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("LAB6.Models.ServiceBooking", b =>
                {
                    b.HasOne("LAB6.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LAB6.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("LicenceNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("LAB6.Models.Customer", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("LAB6.Models.Manufacturer", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("LAB6.Models.Mechanic", b =>
                {
                    b.Navigation("MechanicOnServices");
                });

            modelBuilder.Entity("LAB6.Models.Model", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("LAB6.Models.ServiceBooking", b =>
                {
                    b.Navigation("MechanicsOnServices");
                });
#pragma warning restore 612, 618
        }
    }
}
